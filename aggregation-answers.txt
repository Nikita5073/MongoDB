

1.Find all female users from Jaipur who know Python.
db.users.aggregate(
    [
        {
            $match: {
      gender:"Female",
      city:"Jaipur",
      skills:"Python"
    }
  }
]
)
2.Find all male users in Delhi who are above age 26.
db.users.aggregate(
    [
    {
      $match: {
        city:"New Delhi",
        gender:"Male",
        age:{$gt:26}								
      }
    }
  ]
)

3.Find all users who are from either New Delhi or Mumbai.
$in: more than one true

db.users.aggregate(
    [
    {
      $match: {
        city:{$in:["New Delhi","Mumbai"]}
      }
    }
  ]
)
5.How many users are from New Delhi?
db.users.aggregate(
    [
    {
      $match: {
        city:"New Delhi"
      }
    },
    {
      $count: 'TotalUsersFromNewDelhi'
    }
  ]
)
6.How many Female users are from Jaipur?
db.users.aggregate(
    [
    {
      $match: {
        city:"Jaipur",
        gender:"Female"
      }
    },
    {
      $count: 'TotalFemaleUsersFromJiapur'
    }
  ]
)
7.How many Male users are there in Delhi who have skills Java?
db.users.aggregate(
    [
    {
      $match: {
        city:"New Delhi",
        gender:"Male",
        skills:"Python"
      }
    },
    {
      $count: 'UsersFromNewDelhiHavingSkillsPython'
    }
  ]
)

8.How many users are from Hyderabad having age greater than 24 and have skill Python,C++

db.users.aggregate(
    [
    {
      $match: {
        city:"Hyderabad",
        age:{$gt:24},
        skills:{$all["C++","Java"]}
      }
    },
    {
      $count: 'JavaC++FromHyderabad'
    }
  ]
)

9.How many female users are from Goa having age greater than 24 and have skill Python,C++
db.users.aggregate(
    [
    {
      $match: {
        city:"Goa",
        gender:"Female",
        age:{$gt:24},
        skills:{$all:["C++","Python"]}
      }
    },
    {
      $count: 'C++PythonFromGoa'
    }
  ]
)

//Groups:
can be done on the basis of any key
documents ko on the basis of skills,gender,city
1.find count of each city.
db.users.aggregate(
  [
  {
    $group: {
      _id: "$city",
      countuser:{$sum:1}
      }
  }
]
)
2.find total male and female in document in Groups
db.users.aggregate(
  [
  {
    $group: {
      _id: "$gender",
      countuser:{$sum:1}
      }
  }
]
)
3.based on age group and find total no of documents in age group.
db.users.aggregate(
  [
  {
    $group: {
      _id: "$age",
      countuser:{$sum:1}
      }
  }
]
)
4.Find all users who have the same lastname.
db.users.aggregate(
  [
  {
    $group: {
      _id: "$lastName",
      countuser:{$sum:1},
      users:{$push:"$$ROOT"}
      }
  }
]
)
5.Find the count of users in each city.
db.users.aggregate(
  [
  {
    $group: {
      _id: "$city",
      countuser:{$sum:1},
      users:{$push:"$$ROOT"}
      }
  }
]
)
-----------------------------------------------------------------
1. Group users by role and calculate the average salary for each role.
$avg ka use karke hum log avergae nikal skte h
db.users.aggregate(
  [
  {
    $group: {
      _id: "$role",
      averageSal:{$avg:"$salary"}
    }
  }
]
)

2. Group users by city and find the total number of users in each city.
db.users.aggregate(
  [
  {
    $group: {
      _id: "$city",
      users:{$sum:1}
    }
  }
]
)

3. Group users by gender and determine the average age for each gender.
db.users.aggregate(
  [
  {
    $group: {
      _id: "$gender",
      averageAge:{$avg:"$age"}
    }
  }
]
)
4. Group users by gender and determine the average salary for each gender.
db.users.aggregate(
  [
  {
    $group: {
      _id: "$gender",
      averageSal:{$avg:"$salary"}
    }
  }
]
)

5. Group users by role and city, and calculate the total salary for each subgroup.

//composite keys:is the combination of more than one object keys.
db.users.aggregate(
  [
  {
    $group: {
      _id: {role:"$role",city:"$city"},
      averageSal:{$sum:"$salary"}
    }
  }
]
)
6. Group users by gender and city, and find the average salary in each subgroup.
db.users.aggregate(
  [
  {
    $group: {
      _id: {gender:"$gender",city:"$city"},
      averageSal:{$avg:"$salary"}
    }
  }
]
)
7. Group users by gender and city, and find the maximum salary in each subgroup.
db.users.aggregate(
  [
  {
    $group: {
      _id: {gender:"$gender",city:"$city"},
      maxSal:{$max:"$salary"}
    }
  }
]
)
8. Group users by skills and count how many users have each skill.
$unwind ka use krenge array ko todne k liye
db.users.aggregate(
  [
  {
    $unwind:"$skills",
  },
  {
    $group: {
      _id:"$skills",
      skillscount:{$sum:1},
      users:{$push:"$$ROOT"}
    }
  }
]
)
9.Group users by skills and calculate the average salary of users.
db.users.aggregate(
  [
  {
    $unwind:"$skills",
  },
  {
    $group: {
      _id:"$skills",
      averageSal:{$avg:"$salary"}
    }
  }
]
)
10. Group users by role and find the minimum age for each role.
db.users.aggregate(
  [
  {
    $group: {
      _id:"$role",
      minAge:{$min:"$age"}
    }
  }
]
)
11. Group users by city and gender, and calculate the average salary for each subgroup.
db.users.aggregate(
  [
  {
    $group: {
      _id:{gender:"$gender",city:"$city"},
      averageSal:{$avg:"$salary"}
    }
  }
]
)
12. Group users by role and determine the total number of unique cities for each role.
db.users.aggregate(
  [
  {
    $group: {
      _id:"$role",
      uniqueCity:{$addToSet:"$city"}
    }
  },
  {
    $project: {
      totaluniqueCity:{$size:"$uniqueCity"}
    }
  }
]
)
------------------------------------------------------------
[
  {
    $group: {
      _id:"$role",
      uniqueCity:{$addToSet:"$city"}
    }
  },
  {
    $project: {
      role:"$_id",
      city:"$uniqueCity",
      totaluniqueCity:{$size:"$uniqueCity"}
    }
  }
]
13. Group users by age and count the number of users in each age group.
db.users.aggregate(
  [
  {
    $group: {
      _id:"$age",
      usersCount:{$sum:1}
    }
  }
  
]
)

